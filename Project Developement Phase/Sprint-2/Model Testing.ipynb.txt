{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "eeccf9e1",
   "metadata": {},
   "source": [
    "# Testing the model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e0b9c3f",
   "metadata": {},
   "source": [
    "### Importing the model testing libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5e09240e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 594 images belonging to 6 classes.\n",
      "Found 30 images belonging to 6 classes.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np  \n",
    "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow.keras.preprocessing import image\n",
    "model = load_model(\"Gesture.h5\")\n",
    "train_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\n",
    "test_datagen=ImageDataGenerator(rescale=1./255)\n",
    "x_train = train_datagen.flow_from_directory(r\"D:\\New folder\\Dataset\\train\",target_size=(64, 64),batch_size=3,color_mode='grayscale',class_mode='categorical')\n",
    "x_test = test_datagen.flow_from_directory(r\"D:\\New folder\\Dataset\\test\",target_size=(64, 64),batch_size=3,color_mode='grayscale',class_mode='categorical') "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91aebc9c",
   "metadata": {},
   "source": [
    "### Plotting the image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "95e433a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "%pylab is deprecated, use %matplotlib inline and import the required libraries.\n",
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "%pylab inline\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as img\n",
    "imgs = img.imread(path)\n",
    "imgplot = plt.imshow(imgs)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72c8d514",
   "metadata": {},
   "source": [
    "#### Loading the image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "3451ddf8",
   "metadata": {},
   "outputs": [],
   "source": [
    "img = image.load_img(r\"D:\\New folder\\Dataset\\test\\1\\1.jpg\",color_mode=\"grayscale\",target_size= (64,64))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9c17302",
   "metadata": {},
   "source": [
    "#### Image to array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "8cb7007f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(64, 64, 1)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = image.img_to_array(img)\n",
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "20624cdc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "393c9be5",
   "metadata": {},
   "source": [
    "#### Changing the shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "714987fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=np.expand_dims(x,axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "d017fa7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 64, 64, 1)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de3bfd06",
   "metadata": {},
   "source": [
    "#### Predicting the classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "5d9c9e6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1/1 [==============================] - 0s 125ms/step\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.16402991, 0.16187584, 0.16885874, 0.16927098, 0.16757344,\n",
       "        0.16839108]], dtype=float32)"
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred=model.predict(x)\n",
    "pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "ee2134a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5}"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test.class_indices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "447d87d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "index=['0','1','2','3','4','5']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "2d610995",
   "metadata": {},
   "outputs": [],
   "source": [
    "result=index[np.argmax(pred)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "c36a5c3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'3'"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
