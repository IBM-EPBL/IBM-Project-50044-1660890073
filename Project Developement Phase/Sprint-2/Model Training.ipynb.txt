{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7c8060a5",
   "metadata": {},
   "source": [
    "# Model Building"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a33d8dc",
   "metadata": {},
   "source": [
    "### Importing the model building libraries "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "efd7fa3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import tensorflow \n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras.layers import Dense,Flatten\n",
    "from tensorflow.keras.layers import Conv2D,MaxPooling2D\n",
    "from keras.preprocessing.image import ImageDataGenerator"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "656135c7",
   "metadata": {},
   "source": [
    "### Data Augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "8bc09a15",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_datagen = ImageDataGenerator(rescale = 1./255, shear_range= 0.2,zoom_range= 0.2, horizontal_flip =True) \n",
    "test_datagen =ImageDataGenerator(rescale=1./255)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7559dfb",
   "metadata": {},
   "source": [
    "### Loading our data and performing data augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "40356a30",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 594 images belonging to 6 classes.\n",
      "Found 30 images belonging to 6 classes.\n"
     ]
    }
   ],
   "source": [
    "x_train = train_datagen.flow_from_directory(r\"D:\\New folder\\Dataset\\train\",target_size = (64,64),batch_size = 5,color_mode='grayscale',class_mode ='categorical')\n",
    "x_test = test_datagen.flow_from_directory(r\"D:\\New folder\\Dataset\\test\",target_size = (64,64), batch_size = 5,color_mode='grayscale',class_mode ='categorical')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "af006e21",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\n"
     ]
    }
   ],
   "source": [
    "print(x_train.class_indices)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fccafbd",
   "metadata": {},
   "source": [
    "### Model Initialization "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "23e7ad29",
   "metadata": {},
   "outputs": [],
   "source": [
    "model=Sequential()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23726d2a",
   "metadata": {},
   "source": [
    "### Adding CNN Layers "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4576dcd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Conv2D(32,(3,3), input_shape=(64,64,1), activation ='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Conv2D(32,(3,3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Flatten())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a9dd330",
   "metadata": {},
   "source": [
    "### Adding Dense Layers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "c07e5665",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(units=128,activation='relu'))\n",
    "model.add(Dense(units=6,activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "bf9d6c19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_3\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_2 (Conv2D)           (None, 62, 62, 32)        320       \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 31, 31, 32)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 29, 29, 32)        9248      \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPooling  (None, 14, 14, 32)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " flatten_1 (Flatten)         (None, 6272)              0         \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 128)               802944    \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 6)                 774       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 813,286\n",
      "Trainable params: 813,286\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c97bd999",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.add(Dense(units=128, activation='relu'))\n",
    "model.add(Dense(units=6, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e3d9caa3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_3\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_2 (Conv2D)           (None, 62, 62, 32)        320       \n",
      "                                                                 \n",
      " max_pooling2d_2 (MaxPooling  (None, 31, 31, 32)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 29, 29, 32)        9248      \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPooling  (None, 14, 14, 32)       0         \n",
      " 2D)                                                             \n",
      "                                                                 \n",
      " flatten_1 (Flatten)         (None, 6272)              0         \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 128)               802944    \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 6)                 774       \n",
      "                                                                 \n",
      " dense_6 (Dense)             (None, 128)               896       \n",
      "                                                                 \n",
      " dense_7 (Dense)             (None, 6)                 774       \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 814,956\n",
      "Trainable params: 814,956\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ec7cd48",
   "metadata": {},
   "source": [
    "# Model Compilation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0e711dd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92b2fcdb",
   "metadata": {},
   "source": [
    "## Training the model "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84f03b5e",
   "metadata": {},
   "source": [
    "###  Model fitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "b97509cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admin\\AppData\\Local\\Temp\\ipykernel_7704\\1494857613.py:1: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
      "  model.fit_generator(generator=x_train,steps_per_epoch = len(x_train),epochs=20,validation_data=x_test,validation_steps=len(x_test))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "119/119 [==============================] - 5s 37ms/step - loss: 1.7978 - accuracy: 0.1498 - val_loss: 1.7922 - val_accuracy: 0.1667\n",
      "Epoch 2/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7979 - accuracy: 0.1431 - val_loss: 1.7919 - val_accuracy: 0.1667\n",
      "Epoch 3/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7960 - accuracy: 0.1532 - val_loss: 1.7920 - val_accuracy: 0.1667\n",
      "Epoch 4/20\n",
      "119/119 [==============================] - 3s 21ms/step - loss: 1.7961 - accuracy: 0.1313 - val_loss: 1.7925 - val_accuracy: 0.1667\n",
      "Epoch 5/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7970 - accuracy: 0.1397 - val_loss: 1.7927 - val_accuracy: 0.1667\n",
      "Epoch 6/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7972 - accuracy: 0.1515 - val_loss: 1.7920 - val_accuracy: 0.1667\n",
      "Epoch 7/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7965 - accuracy: 0.1330 - val_loss: 1.7921 - val_accuracy: 0.1667\n",
      "Epoch 8/20\n",
      "119/119 [==============================] - 3s 21ms/step - loss: 1.7954 - accuracy: 0.1532 - val_loss: 1.7920 - val_accuracy: 0.1667\n",
      "Epoch 9/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7973 - accuracy: 0.1364 - val_loss: 1.7924 - val_accuracy: 0.1667\n",
      "Epoch 10/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7962 - accuracy: 0.1549 - val_loss: 1.7923 - val_accuracy: 0.1667\n",
      "Epoch 11/20\n",
      "119/119 [==============================] - 3s 21ms/step - loss: 1.7950 - accuracy: 0.1448 - val_loss: 1.7919 - val_accuracy: 0.1667\n",
      "Epoch 12/20\n",
      "119/119 [==============================] - 3s 21ms/step - loss: 1.7958 - accuracy: 0.1296 - val_loss: 1.7920 - val_accuracy: 0.1667\n",
      "Epoch 13/20\n",
      "119/119 [==============================] - 3s 22ms/step - loss: 1.7963 - accuracy: 0.1448 - val_loss: 1.7918 - val_accuracy: 0.1667\n",
      "Epoch 14/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7956 - accuracy: 0.1481 - val_loss: 1.7920 - val_accuracy: 0.1667\n",
      "Epoch 15/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7959 - accuracy: 0.1431 - val_loss: 1.7919 - val_accuracy: 0.1667\n",
      "Epoch 16/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7969 - accuracy: 0.1380 - val_loss: 1.7919 - val_accuracy: 0.1667\n",
      "Epoch 17/20\n",
      "119/119 [==============================] - 2s 20ms/step - loss: 1.7952 - accuracy: 0.1616 - val_loss: 1.7922 - val_accuracy: 0.1667\n",
      "Epoch 18/20\n",
      "119/119 [==============================] - 3s 21ms/step - loss: 1.7952 - accuracy: 0.1465 - val_loss: 1.7919 - val_accuracy: 0.1667\n",
      "Epoch 19/20\n",
      "119/119 [==============================] - 2s 21ms/step - loss: 1.7960 - accuracy: 0.1532 - val_loss: 1.7919 - val_accuracy: 0.1667\n",
      "Epoch 20/20\n",
      "119/119 [==============================] - 3s 21ms/step - loss: 1.7953 - accuracy: 0.1279 - val_loss: 1.7919 - val_accuracy: 0.1667\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x2216353f190>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit_generator(generator=x_train,steps_per_epoch = len(x_train),epochs=20,validation_data=x_test,validation_steps=len(x_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1b45783",
   "metadata": {},
   "source": [
    "# Saving the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "1920c7ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save('gesture.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b96adc31",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_json=classifier.to_json()\n",
    "with open(\"model-bw.json\",\"w\") as json_file:\n",
    "    json_file.write(model_json)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
