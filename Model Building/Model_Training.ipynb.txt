{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Model Building**"
      ],
      "metadata": {
        "id": "EORRYXqTrC3J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "#open source used for both ML and DL for computation\n",
        "import tensorflow as tf\n",
        "#it is a plain stack of layers\n",
        "from tensorflow.keras.models import Sequential \n",
        "#Dense layer is the regular deeply connected neural network layer\n",
        "from tensorflow.keras.layers import Dense,Flatten, Dropout\n",
        "#Faltten-used fot flattening the input or change the dimension, MaxPooling2D-for downsampling the image for Convolutional layer\n",
        "from tensorflow.keras.layers import Convolution2D,MaxPooling2D \n",
        "#Its used for different augmentation of the image \n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
      ],
      "metadata": {
        "id": "xlrDH4xkrHk-"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_datagen = ImageDataGenerator(rescale=1./255,\n",
        "                                   shear_range=0.2,\n",
        "                                   zoom_range=0.2,\n",
        "                                   horizontal_flip=True)\n",
        "#Image Data agumentation to the testing data\n",
        "test_datagen=ImageDataGenerator(rescale=1./255)"
      ],
      "metadata": {
        "id": "ZqzvWJRZrPFf"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train = train_datagen.flow_from_directory(r'/content/drive/MyDrive/train (2)',\n",
        "                                            target_size=(64, 64),\n",
        "                                            batch_size=3,\n",
        "                                            color_mode='grayscale',\n",
        "                                            class_mode='categorical')\n",
        "#performing data agumentation to test data\n",
        "x_test = test_datagen.flow_from_directory(r'/content/drive/MyDrive/test (1)',\n",
        "                                          target_size=(64, 64),\n",
        "                                          batch_size=3,\n",
        "                                          color_mode='grayscale',\n",
        "                                          class_mode='categorical') "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GBD8LMKZrRnb",
        "outputId": "5e498831-1675-4eb1-e3fd-b39ad3edb3b1"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 594 images belonging to 6 classes.\n",
            "Found 30 images belonging to 6 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_train.class_indices)#checking the number of classes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RDDyE5hdrhdV",
        "outputId": "7a0c1a2e-1084-41f1-aca9-4d6225bbf1ca"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Model Creation**"
      ],
      "metadata": {
        "id": "FkRBHLJxrkOV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initializing the CNN\n",
        "model = Sequential()"
      ],
      "metadata": {
        "id": "uFxyWadtrnA9"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# First convolution layer and pooling\n",
        "model.add(Convolution2D(32, (3, 3), input_shape=(64, 64, 1), activation='relu'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))"
      ],
      "metadata": {
        "id": "sYL3n-XSrqGq"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Second convolution layer and pooling\n",
        "model.add(Convolution2D(32, (3, 3), activation='relu'))\n",
        "# input_shape is going to be the pooled feature maps from the previous convolution layer\n",
        "model.add(MaxPooling2D(pool_size=(2,2)))"
      ],
      "metadata": {
        "id": "wL49bDdprtgG"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Flattening the layers i.e. input layer\n",
        "model.add(Flatten())"
      ],
      "metadata": {
        "id": "lskoULw2rvpf"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Adding a fully connected layer, i.e. Hidden Layer\n",
        "model.add(Dense(units=512 , activation='relu'))"
      ],
      "metadata": {
        "id": "4I6VnKauryuI"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# softmax for categorical analysis, Output Layer\n",
        "model.add(Dense(units=6, activation='softmax')) "
      ],
      "metadata": {
        "id": "IIcc91C9r1Lu"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()#summary of our model"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GCTAroo9r5vP",
        "outputId": "d57d7e57-fc31-4d90-aeda-f0c4375c3a27"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 62, 62, 32)        320       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 31, 31, 32)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 29, 29, 32)        9248      \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 14, 14, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 6272)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 512)               3211776   \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 6)                 3078      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 3,224,422\n",
            "Trainable params: 3,224,422\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Compilation**"
      ],
      "metadata": {
        "id": "qcGF4YhLsBFt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Compiling the CNN\n",
        "# categorical_crossentropy for more than 2\n",
        "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) "
      ],
      "metadata": {
        "id": "o77SrFsGsEob"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Fitting**"
      ],
      "metadata": {
        "id": "nZX_il8-sI9d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# It will generate packets of train and test data for training\n",
        "model.fit_generator(x_train,\n",
        "                    steps_per_epoch = 594/3 , \n",
        "                    epochs = 25, \n",
        "                    validation_data = x_test,\n",
        "                    validation_steps = 30/3 )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "21x-CKVVsK7_",
        "outputId": "4ec6971b-72c3-4abc-e8d0-b06a50a7ff4c"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n",
            "  \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/25\n",
            "198/198 [==============================] - 207s 1s/step - loss: 1.2632 - accuracy: 0.4983 - val_loss: 0.6403 - val_accuracy: 0.7667\n",
            "Epoch 2/25\n",
            "198/198 [==============================] - 13s 68ms/step - loss: 0.5919 - accuracy: 0.7811 - val_loss: 0.5100 - val_accuracy: 0.8333\n",
            "Epoch 3/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.3785 - accuracy: 0.8418 - val_loss: 0.4440 - val_accuracy: 0.9000\n",
            "Epoch 4/25\n",
            "198/198 [==============================] - 15s 77ms/step - loss: 0.2636 - accuracy: 0.8990 - val_loss: 0.3766 - val_accuracy: 0.9667\n",
            "Epoch 5/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.2224 - accuracy: 0.9108 - val_loss: 0.3743 - val_accuracy: 0.9333\n",
            "Epoch 6/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.1416 - accuracy: 0.9512 - val_loss: 0.3400 - val_accuracy: 0.9667\n",
            "Epoch 7/25\n",
            "198/198 [==============================] - 14s 70ms/step - loss: 0.0965 - accuracy: 0.9697 - val_loss: 0.4286 - val_accuracy: 0.9333\n",
            "Epoch 8/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.1223 - accuracy: 0.9596 - val_loss: 0.3441 - val_accuracy: 0.9333\n",
            "Epoch 9/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.0820 - accuracy: 0.9781 - val_loss: 0.3626 - val_accuracy: 0.9333\n",
            "Epoch 10/25\n",
            "198/198 [==============================] - 14s 69ms/step - loss: 0.1230 - accuracy: 0.9630 - val_loss: 0.5732 - val_accuracy: 0.8667\n",
            "Epoch 11/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.0679 - accuracy: 0.9798 - val_loss: 0.7845 - val_accuracy: 0.8667\n",
            "Epoch 12/25\n",
            "198/198 [==============================] - 12s 63ms/step - loss: 0.0900 - accuracy: 0.9646 - val_loss: 0.3583 - val_accuracy: 0.9333\n",
            "Epoch 13/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.0352 - accuracy: 0.9882 - val_loss: 0.4457 - val_accuracy: 0.9667\n",
            "Epoch 14/25\n",
            "198/198 [==============================] - 12s 61ms/step - loss: 0.0465 - accuracy: 0.9832 - val_loss: 0.2876 - val_accuracy: 0.9667\n",
            "Epoch 15/25\n",
            "198/198 [==============================] - 14s 69ms/step - loss: 0.0420 - accuracy: 0.9832 - val_loss: 0.3371 - val_accuracy: 0.9667\n",
            "Epoch 16/25\n",
            "198/198 [==============================] - 15s 77ms/step - loss: 0.0318 - accuracy: 0.9882 - val_loss: 0.2567 - val_accuracy: 0.9667\n",
            "Epoch 17/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.0484 - accuracy: 0.9832 - val_loss: 0.3636 - val_accuracy: 0.8667\n",
            "Epoch 18/25\n",
            "198/198 [==============================] - 14s 69ms/step - loss: 0.0461 - accuracy: 0.9815 - val_loss: 0.5469 - val_accuracy: 0.9667\n",
            "Epoch 19/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.1334 - accuracy: 0.9495 - val_loss: 0.2518 - val_accuracy: 0.9333\n",
            "Epoch 20/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.0414 - accuracy: 0.9848 - val_loss: 0.2982 - val_accuracy: 0.9667\n",
            "Epoch 21/25\n",
            "198/198 [==============================] - 14s 69ms/step - loss: 0.0200 - accuracy: 0.9949 - val_loss: 0.8723 - val_accuracy: 0.9667\n",
            "Epoch 22/25\n",
            "198/198 [==============================] - 12s 62ms/step - loss: 0.1019 - accuracy: 0.9596 - val_loss: 0.4869 - val_accuracy: 0.9667\n",
            "Epoch 23/25\n",
            "198/198 [==============================] - 12s 63ms/step - loss: 0.0257 - accuracy: 0.9899 - val_loss: 0.6452 - val_accuracy: 0.9667\n",
            "Epoch 24/25\n",
            "198/198 [==============================] - 13s 63ms/step - loss: 0.0086 - accuracy: 0.9966 - val_loss: 0.6634 - val_accuracy: 0.9667\n",
            "Epoch 25/25\n",
            "198/198 [==============================] - 12s 63ms/step - loss: 0.0515 - accuracy: 0.9865 - val_loss: 0.5638 - val_accuracy: 0.9667\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7fcf44c8b390>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Saving**"
      ],
      "metadata": {
        "id": "p5XyPcKOsYeo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the model\n",
        "model.save('Tested_gesture.h5')"
      ],
      "metadata": {
        "id": "4z1T7RX_sguv"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model_json = model.to_json()\n",
        "with open(\"model-bw.json\", \"w\") as json_file:\n",
        "    json_file.write(model_json)"
      ],
      "metadata": {
        "id": "_B7DEz2ptvTo"
      },
      "execution_count": 15,
      "outputs": []
    }
  ]
}